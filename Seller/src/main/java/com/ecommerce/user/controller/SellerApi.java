/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ecommerce.user.controller;

import com.ecommerce.user.model.AdminResponse;
import com.ecommerce.user.model.UserRequest;
import com.ecommerce.user.model.UserResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-06-11T18:09:09.537264300+05:30[Asia/Calcutta]")

@Validated
@Api(value = "seller", description = "the seller API")
public interface SellerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /seller/{sellerId} : change the status of the seller
     * change the status of seller to active.
     *
     * @param sellerId  (required)
     * @return Succesfull operation. (status code 200)
     */
    @ApiOperation(value = "change the status of the seller", nickname = "activeSeller", notes = "change the status of seller to active.", response = AdminResponse.class, tags={ "seller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Succesfull operation.", response = AdminResponse.class) })
    @RequestMapping(value = "/seller/{sellerId}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<AdminResponse> activeSeller(@ApiParam(value = "",required=true) @PathVariable("sellerId") String sellerId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : [ { \"address\" : \"James\", \"phone\" : 9855455, \"name\" : \"John\", \"id\" : \"id\", \"email\" : \"john@email.com\", \"status\" : \"status\" }, { \"address\" : \"James\", \"phone\" : 9855455, \"name\" : \"John\", \"id\" : \"id\", \"email\" : \"john@email.com\", \"status\" : \"status\" } ], \"statusMessage\" : \"Operation completed successful\", \"statusCode\" : 200 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /seller : gets all the users
     * This is used to give all the information to admin
     *
     * @return Succesfull operation. (status code 200)
     *         or  (status code 400)
     */
    @ApiOperation(value = "gets all the users", nickname = "adminUser", notes = "This is used to give all the information to admin", response = AdminResponse.class, tags={ "seller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Succesfull operation.", response = AdminResponse.class),
        @ApiResponse(code = 400, message = "") })
    @RequestMapping(value = "/seller",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<AdminResponse> adminUser() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : [ { \"address\" : \"James\", \"phone\" : 9855455, \"name\" : \"John\", \"id\" : \"id\", \"email\" : \"john@email.com\", \"status\" : \"status\" }, { \"address\" : \"James\", \"phone\" : 9855455, \"name\" : \"John\", \"id\" : \"id\", \"email\" : \"john@email.com\", \"status\" : \"status\" } ], \"statusMessage\" : \"Operation completed successful\", \"statusCode\" : 200 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /seller/register : Create new user / Register a new User
     * This is used to create the user.
     *
     * @param userRequest Created user object (required)
     * @return Succesfull operation. (status code 200)
     *         or  (status code 400)
     */
    @ApiOperation(value = "Create new user / Register a new User", nickname = "createUser", notes = "This is used to create the user.", response = UserResponse.class, tags={ "seller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Succesfull operation.", response = UserResponse.class),
        @ApiResponse(code = 400, message = "") })
    @RequestMapping(value = "/seller/register",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<UserResponse> createUser(@ApiParam(value = "Created user object" ,required=true )  @Valid @RequestBody UserRequest userRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"sellerid\" : \"sellerid\", \"address\" : \"James\", \"phone\" : 9855455, \"name\" : \"John\", \"email\" : \"john@email.com\" }, \"statusMessage\" : \"Operation completed successful\", \"statusCode\" : 200 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /seller/{sellerId} : change the status of the seller
     * change the status of seller to inactive.
     *
     * @param sellerId  (required)
     * @return Succesfull operation. (status code 200)
     */
    @ApiOperation(value = "change the status of the seller", nickname = "inActiveSeller", notes = "change the status of seller to inactive.", response = AdminResponse.class, tags={ "seller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Succesfull operation.", response = AdminResponse.class) })
    @RequestMapping(value = "/seller/{sellerId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<AdminResponse> inActiveSeller(@ApiParam(value = "",required=true) @PathVariable("sellerId") String sellerId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : [ { \"address\" : \"James\", \"phone\" : 9855455, \"name\" : \"John\", \"id\" : \"id\", \"email\" : \"john@email.com\", \"status\" : \"status\" }, { \"address\" : \"James\", \"phone\" : 9855455, \"name\" : \"John\", \"id\" : \"id\", \"email\" : \"john@email.com\", \"status\" : \"status\" } ], \"statusMessage\" : \"Operation completed successful\", \"statusCode\" : 200 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /seller/login : Login the user / Login the User
     * This is used to login the user.
     *
     * @param email  (required)
     * @param password  (required)
     * @return Succesfull operation. (status code 200)
     */
    @ApiOperation(value = "Login the user / Login the User", nickname = "loginUser", notes = "This is used to login the user.", response = UserResponse.class, tags={ "seller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Succesfull operation.", response = UserResponse.class) })
    @RequestMapping(value = "/seller/login",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<UserResponse> loginUser(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "email", required = true) String email,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "password", required = true) String password) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"sellerid\" : \"sellerid\", \"address\" : \"James\", \"phone\" : 9855455, \"name\" : \"John\", \"email\" : \"john@email.com\" }, \"statusMessage\" : \"Operation completed successful\", \"statusCode\" : 200 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /seller/{sellerId} : get the user details for admin
     * view one seller.
     *
     * @param sellerId  (required)
     * @return Succesfull operation. (status code 200)
     */
    @ApiOperation(value = "get the user details for admin", nickname = "singleseller", notes = "view one seller.", response = AdminResponse.class, tags={ "seller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Succesfull operation.", response = AdminResponse.class) })
    @RequestMapping(value = "/seller/{sellerId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<AdminResponse> singleseller(@ApiParam(value = "",required=true) @PathVariable("sellerId") String sellerId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : [ { \"address\" : \"James\", \"phone\" : 9855455, \"name\" : \"John\", \"id\" : \"id\", \"email\" : \"john@email.com\", \"status\" : \"status\" }, { \"address\" : \"James\", \"phone\" : 9855455, \"name\" : \"John\", \"id\" : \"id\", \"email\" : \"john@email.com\", \"status\" : \"status\" } ], \"statusMessage\" : \"Operation completed successful\", \"statusCode\" : 200 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
