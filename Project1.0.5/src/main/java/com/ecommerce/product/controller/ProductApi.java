/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ecommerce.product.controller;

import com.ecommerce.product.model.ErrorResponse;
import com.ecommerce.product.model.ProductResponse;
import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-06-14T19:35:05.706628+05:30[Asia/Calcutta]")

@Validated
@Api(value = "product", description = "the product API")
@CrossOrigin(origins = "http://127.0.0.1:5500")
public interface ProductApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /product/seller/{sellerID} : get all products from the database by its Id
     * returns all products by its Id
     *
     * @param sellerID  (required)
     * @return okay accepted (status code 200)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "get all products from the database by its Id", nickname = "allProductsBySellerId", notes = "returns all products by its Id", response = ProductResponse.class, tags={ "SellerProduct", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "okay accepted", response = ProductResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/product/seller/{sellerID}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ProductResponse> allProductsBySellerId(@ApiParam(value = "",required=true) @PathVariable("sellerID") String sellerID) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : [ { \"images\" : [ { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" }, { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" } ], \"quantity\" : 10, \"sellerNumber\" : \"sellerNumber\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\", \"status\" : \"status\" }, { \"images\" : [ { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" }, { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" } ], \"quantity\" : 10, \"sellerNumber\" : \"sellerNumber\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\", \"status\" : \"status\" } ], \"PageDate\" : { \"totalItems\" : 20, \"offset\" : 0, \"limit\" : 15, \"totalPages\" : 10 }, \"statusMessage\" : \"Operation completed successful\", \"statusCode\" : 200 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /product/{sellerID}/{ProductName} : Delete product
     * This is a delete product.
     *
     * @param productName The name that needs to be deleted (required)
     * @param sellerID  (required)
     * @return operation successful (status code 200)
     */
    @ApiOperation(value = "Delete product", nickname = "deleteProduct", notes = "This is a delete product.", tags={ "SellerProduct", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "operation successful") })
    @RequestMapping(value = "/product/{sellerID}/{ProductName}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteProduct(@ApiParam(value = "The name that needs to be deleted",required=true) @PathVariable("ProductName") String productName,@ApiParam(value = "",required=true) @PathVariable("sellerID") String sellerID) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /product/{category} : get the list of specific category of products
     * It gets all the products from the specific category
     *
     * @param category  (required)
     * @param productname  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 15)
     * @return okay accepted (status code 200)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "get the list of specific category of products", nickname = "getAllCategoryProducts", notes = "It gets all the products from the specific category", response = ProductResponse.class, tags={ "UserProduct", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "okay accepted", response = ProductResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/product/{category}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ProductResponse> getAllCategoryProducts(@ApiParam(value = "",required=true) @PathVariable("category") String category,@ApiParam(value = "") @Valid @RequestParam(value = "productname", required = false) String productname,@ApiParam(value = "", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "", defaultValue = "15") @Valid @RequestParam(value = "limit", required = false, defaultValue="15") Integer limit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : [ { \"images\" : [ { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" }, { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" } ], \"quantity\" : 10, \"sellerNumber\" : \"sellerNumber\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\", \"status\" : \"status\" }, { \"images\" : [ { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" }, { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" } ], \"quantity\" : 10, \"sellerNumber\" : \"sellerNumber\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\", \"status\" : \"status\" } ], \"PageDate\" : { \"totalItems\" : 20, \"offset\" : 0, \"limit\" : 15, \"totalPages\" : 10 }, \"statusMessage\" : \"Operation completed successful\", \"statusCode\" : 200 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /product/seller/{sellerID}/{category} : get the list of specific seller selling products
     * It gets all the products from the specific seller
     *
     * @param category  (required)
     * @param sellerID  (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 15)
     * @return okay accepted (status code 200)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "get the list of specific seller selling products", nickname = "getAllSellerProducts", notes = "It gets all the products from the specific seller", response = ProductResponse.class, tags={ "SellerProduct", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "okay accepted", response = ProductResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/product/seller/{sellerID}/{category}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ProductResponse> getAllSellerProducts(@ApiParam(value = "",required=true) @PathVariable("category") String category,@ApiParam(value = "",required=true) @PathVariable("sellerID") String sellerID,@ApiParam(value = "", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "", defaultValue = "15") @Valid @RequestParam(value = "limit", required = false, defaultValue="15") Integer limit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : [ { \"images\" : [ { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" }, { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" } ], \"quantity\" : 10, \"sellerNumber\" : \"sellerNumber\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\", \"status\" : \"status\" }, { \"images\" : [ { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" }, { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" } ], \"quantity\" : 10, \"sellerNumber\" : \"sellerNumber\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\", \"status\" : \"status\" } ], \"PageDate\" : { \"totalItems\" : 20, \"offset\" : 0, \"limit\" : 15, \"totalPages\" : 10 }, \"statusMessage\" : \"Operation completed successful\", \"statusCode\" : 200 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /product/{sellerID}/{ProductName} : get a single product from the database by its name
     * returns a single product by matching name
     *
     * @param productName  (required)
     * @param sellerID  (required)
     * @return okay accepted (status code 200)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "get a single product from the database by its name", nickname = "getSingleProductBySeller", notes = "returns a single product by matching name", response = ProductResponse.class, tags={ "SellerProduct", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "okay accepted", response = ProductResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/product/{sellerID}/{ProductName}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ProductResponse> getSingleProductBySeller(@ApiParam(value = "",required=true) @PathVariable("ProductName") String productName,@ApiParam(value = "",required=true) @PathVariable("sellerID") String sellerID) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : [ { \"images\" : [ { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" }, { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" } ], \"quantity\" : 10, \"sellerNumber\" : \"sellerNumber\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\", \"status\" : \"status\" }, { \"images\" : [ { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" }, { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" } ], \"quantity\" : 10, \"sellerNumber\" : \"sellerNumber\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\", \"status\" : \"status\" } ], \"PageDate\" : { \"totalItems\" : 20, \"offset\" : 0, \"limit\" : 15, \"totalPages\" : 10 }, \"statusMessage\" : \"Operation completed successful\", \"statusCode\" : 200 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /product/productView/{ProductName} : get a single product from the database by its name
     * returns a single product by matching name
     *
     * @param productName  (required)
     * @return okay accepted (status code 200)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "get a single product from the database by its name", nickname = "getSingleProducts", notes = "returns a single product by matching name", response = ProductResponse.class, tags={ "UserProduct","OrderProduct", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "okay accepted", response = ProductResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/product/productView/{ProductName}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ProductResponse> getSingleProducts(@ApiParam(value = "",required=true) @PathVariable("ProductName") String productName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : [ { \"images\" : [ { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" }, { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" } ], \"quantity\" : 10, \"sellerNumber\" : \"sellerNumber\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\", \"status\" : \"status\" }, { \"images\" : [ { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" }, { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" } ], \"quantity\" : 10, \"sellerNumber\" : \"sellerNumber\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\", \"status\" : \"status\" } ], \"PageDate\" : { \"totalItems\" : 20, \"offset\" : 0, \"limit\" : 15, \"totalPages\" : 10 }, \"statusMessage\" : \"Operation completed successful\", \"statusCode\" : 200 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /product/status/{sellerID}/{statusId}/{productName} : get all the products with category
     * returns products according to the status
     *
     * @param sellerID  (required)
     * @param statusId  (required)
     * @param productName  (required)
     * @return okay accepted (status code 200)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "get all the products with category", nickname = "getStatusProducts", notes = "returns products according to the status", response = ProductResponse.class, tags={ "SellerProduct", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "okay accepted", response = ProductResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/product/status/{sellerID}/{statusId}/{productName}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ProductResponse> getStatusProducts(@ApiParam(value = "",required=true) @PathVariable("sellerID") String sellerID,@ApiParam(value = "",required=true) @PathVariable("statusId") String statusId,@ApiParam(value = "",required=true) @PathVariable("productName") String productName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : [ { \"images\" : [ { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" }, { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" } ], \"quantity\" : 10, \"sellerNumber\" : \"sellerNumber\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\", \"status\" : \"status\" }, { \"images\" : [ { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" }, { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" } ], \"quantity\" : 10, \"sellerNumber\" : \"sellerNumber\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\", \"status\" : \"status\" } ], \"PageDate\" : { \"totalItems\" : 20, \"offset\" : 0, \"limit\" : 15, \"totalPages\" : 10 }, \"statusMessage\" : \"Operation completed successful\", \"statusCode\" : 200 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /product/status/{sellerID}/{statusId}/{category} : activate or deactive category
     * changes the category of the product
     *
     * @param sellerID  (required)
     * @param statusId  (required)
     * @param category  (required)
     * @return okay accepted (status code 200)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "activate or deactive category", nickname = "productStatusSellerIDStatusIdCategoryPut", notes = "changes the category of the product", response = ProductResponse.class, tags={ "SellerProduct", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "okay accepted", response = ProductResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/product/status/{sellerID}/{statusId}/{category}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<ProductResponse> productStatusSellerIDStatusIdCategoryPut(@ApiParam(value = "",required=true) @PathVariable("sellerID") String sellerID,@ApiParam(value = "",required=true) @PathVariable("statusId") String statusId,@ApiParam(value = "",required=true) @PathVariable("category") String category) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : [ { \"images\" : [ { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" }, { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" } ], \"quantity\" : 10, \"sellerNumber\" : \"sellerNumber\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\", \"status\" : \"status\" }, { \"images\" : [ { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" }, { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" } ], \"quantity\" : 10, \"sellerNumber\" : \"sellerNumber\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\", \"status\" : \"status\" } ], \"PageDate\" : { \"totalItems\" : 20, \"offset\" : 0, \"limit\" : 15, \"totalPages\" : 10 }, \"statusMessage\" : \"Operation completed successful\", \"statusCode\" : 200 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /product/quantity/{productName}/{quantity} : update the product by quantity
     * returns a updated quantity of the product
     *
     * @param productName  (required)
     * @param quantity  (required)
     * @return okay accepted (status code 200)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "update the product by quantity", nickname = "updateQuantityProduct", notes = "returns a updated quantity of the product", response = ProductResponse.class, tags={ "UserProduct", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "okay accepted", response = ProductResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/product/quantity/{productName}/{quantity}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<ProductResponse> updateQuantityProduct(@ApiParam(value = "",required=true) @PathVariable("productName") String productName,@ApiParam(value = "",required=true) @PathVariable("quantity") String quantity) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : [ { \"images\" : [ { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" }, { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" } ], \"quantity\" : 10, \"sellerNumber\" : \"sellerNumber\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\", \"status\" : \"status\" }, { \"images\" : [ { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" }, { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" } ], \"quantity\" : 10, \"sellerNumber\" : \"sellerNumber\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\", \"status\" : \"status\" } ], \"PageDate\" : { \"totalItems\" : 20, \"offset\" : 0, \"limit\" : 15, \"totalPages\" : 10 }, \"statusMessage\" : \"Operation completed successful\", \"statusCode\" : 200 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /product/{sellerID}/{ProductName} : changethe details of single product from the database by its name
     * change  a single product by matching name
     *
     * @param productName  (required)
     * @param sellerID  (required)
     * @param name  (optional)
     * @param price  (optional)
     * @param details  (optional)
     * @param quantity  (optional)
     * @param sellerNumber  (optional)
     * @param category  (optional)
     * @param discount  (optional)
     * @param status  (optional)
     * @param images  (optional)
     * @return okay accepted (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "changethe details of single product from the database by its name", nickname = "updateSingleProducts", notes = "change  a single product by matching name", response = ProductResponse.class, tags={ "SellerProduct", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "okay accepted", response = ProductResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/product/{sellerID}/{ProductName}",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.PUT)
    default ResponseEntity<ProductResponse> updateSingleProducts(@ApiParam(value = "",required=true) @PathVariable("ProductName") String productName,@ApiParam(value = "",required=true) @PathVariable("sellerID") String sellerID,@ApiParam(value = "") @RequestPart(value="name", required=false)  String name,@ApiParam(value = "") @RequestPart(value="price", required=false)  String price,@ApiParam(value = "") @RequestPart(value="details", required=false)  String details,@ApiParam(value = "") @RequestPart(value="quantity", required=false)  String quantity,@ApiParam(value = "") @RequestPart(value="sellerNumber", required=false)  String sellerNumber,@ApiParam(value = "") @RequestPart(value="category", required=false)  String category,@ApiParam(value = "") @RequestPart(value="discount", required=false)  String discount,@ApiParam(value = "") @RequestPart(value="status", required=false)  String status,@ApiParam(value = "") @Valid @RequestPart(value = "images") List<MultipartFile> images) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : [ { \"images\" : [ { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" }, { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" } ], \"quantity\" : 10, \"sellerNumber\" : \"sellerNumber\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\", \"status\" : \"status\" }, { \"images\" : [ { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" }, { \"imageName\" : \"image\", \"imagedata\" : \"imagedata\", \"imageType\" : \"jpeg\" } ], \"quantity\" : 10, \"sellerNumber\" : \"sellerNumber\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\", \"status\" : \"status\" } ], \"PageDate\" : { \"totalItems\" : 20, \"offset\" : 0, \"limit\" : 15, \"totalPages\" : 10 }, \"statusMessage\" : \"Operation completed successful\", \"statusCode\" : 200 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
