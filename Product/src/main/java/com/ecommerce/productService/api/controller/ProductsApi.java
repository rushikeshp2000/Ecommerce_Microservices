/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ecommerce.productService.api.controller;

import java.math.BigDecimal;
import com.ecommerce.productService.api.model.ProductResponse;
import org.springframework.core.io.Resource;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-30T15:51:39.511425500+05:30[Asia/Calcutta]")

@Validated
@Api(value = "products", description = "the products API")
public interface ProductsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /products : get all the products
     * It gets all the products from the database
     *
     * @param name  (optional)
     * @param pageNumber  (optional, default to 0)
     * @param pageSize  (optional, default to 15)
     * @return okay accepted (status code 200)
     */
    @ApiOperation(value = "get all the products", nickname = "getAllProducts", notes = "It gets all the products from the database", response = ProductResponse.class, responseContainer = "List", tags={ "UserProduct", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "okay accepted", response = ProductResponse.class, responseContainer = "List") })
    @RequestMapping(value = "/products",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ProductResponse>> getAllProducts(@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "", defaultValue = "0") @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="0") Integer pageNumber,@ApiParam(value = "", defaultValue = "15") @Valid @RequestParam(value = "pageSize", required = false, defaultValue="15") Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : [ { \"imagefile3\" : \"\", \"quantity\" : 10, \"imagefile1\" : \"\", \"imagefile2\" : \"\", \"sellerNumber\" : \"ae04a3db-8169-4f91-95f9-478bdb107840\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\" }, { \"imagefile3\" : \"\", \"quantity\" : 10, \"imagefile1\" : \"\", \"imagefile2\" : \"\", \"sellerNumber\" : \"ae04a3db-8169-4f91-95f9-478bdb107840\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\" } ], \"statusMessage\" : \"Operation completed successful\", \"statusCode\" : 200 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /products : post a product to database
     * it is used to save the data
     *
     * @param name  (optional)
     * @param imagefile1  (optional)
     * @param imagefile2  (optional)
     * @param imagefile3  (optional)
     * @param price  (optional)
     * @param details  (optional)
     * @param quantity  (optional)
     * @param sellerNumber  (optional)
     * @param category  (optional)
     * @param discount  (optional)
     * @return okay accepted (status code 201)
     */
    @ApiOperation(value = "post a product to database", nickname = "saveProduct", notes = "it is used to save the data", response = ProductResponse.class, responseContainer = "List", tags={ "SellerProduct", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "okay accepted", response = ProductResponse.class, responseContainer = "List") })
    @RequestMapping(value = "/products",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    default ResponseEntity<List<ProductResponse>> saveProduct(@ApiParam(value = "") @RequestPart(value="name", required=false)  String name,@ApiParam(value = "") @Valid @RequestPart(value = "imagefile1") MultipartFile imagefile1,@ApiParam(value = "") @Valid @RequestPart(value = "imagefile2") MultipartFile imagefile2,@ApiParam(value = "") @Valid @RequestPart(value = "imagefile3") MultipartFile imagefile3,@ApiParam(value = "") @RequestPart(value="price", required=false)  BigDecimal price,@ApiParam(value = "") @RequestPart(value="details", required=false)  String details,@ApiParam(value = "") @RequestPart(value="quantity", required=false)  Integer quantity,@ApiParam(value = "") @RequestPart(value="sellerNumber", required=false)  UUID sellerNumber,@ApiParam(value = "") @RequestPart(value="category", required=false)  String category,@ApiParam(value = "") @RequestPart(value="discount", required=false)  Integer discount) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : [ { \"imagefile3\" : \"\", \"quantity\" : 10, \"imagefile1\" : \"\", \"imagefile2\" : \"\", \"sellerNumber\" : \"ae04a3db-8169-4f91-95f9-478bdb107840\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\" }, { \"imagefile3\" : \"\", \"quantity\" : 10, \"imagefile1\" : \"\", \"imagefile2\" : \"\", \"sellerNumber\" : \"ae04a3db-8169-4f91-95f9-478bdb107840\", \"price\" : 12.25, \"name\" : \"shoes\", \"discount\" : 20, \"details\" : \"description of the image that we want to show\", \"category\" : \"hardware\" } ], \"statusMessage\" : \"Operation completed successful\", \"statusCode\" : 200 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
